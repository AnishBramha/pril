name: 'Build wxWidgets App'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: 'pril-editor-linux'
            executable_name: 'pril-editor'
          - os: windows-latest
            artifact_name: 'pril-editor-windows'
            executable_name: 'pril-editor.exe'
          - os: macos-latest
            artifact_name: 'pril-editor-macos'
            executable_name: 'pril-editor'

    steps:
    - name: 'Checkout code'
      uses: actions/checkout@v4

    - name: 'Install wxWidgets (Linux)'
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwxgtk3.2-dev build-essential

    - name: 'Install wxWidgets (Windows with MSYS2)'
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        # Update package databases and install the MinGW toolchain and wxWidgets
        pacman -Syu --noconfirm
        pacman -S --noconfirm --needed mingw-w64-x86_64-toolchain mingw-w64-x86_64-wxwidgets

    - name: 'Install wxWidgets (macOS)'
      if: matrix.os == 'macos-latest'
      run: brew install wxwidgets

    - name: 'Compile Application (Linux/macOS)'
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        # Use wx-config to get the correct compiler and linker flags
        g++ Frame.cpp App.cpp `wx-config --cxxflags --libs` -o ${{ matrix.executable_name }}
        
    - name: 'Compile Application (Windows with MSYS2)'
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        # This command runs in the MSYS2 shell, where wx-config is available
        g++ Frame.cpp App.cpp `wx-config --cxxflags --libs` -o ${{ matrix.executable_name }}

    - name: 'Create Release Directory'
      run: mkdir release

    - name: 'Move Executable to Release Directory'
      shell: bash
      run: |
        # Use a bash shell for a consistent move command across all OSes
        mv ${{ matrix.executable_name }} release/

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: release/
