name: Build and Release

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: pril-editor
            asset_name: pril-editor-linux.tar.gz
            package_cmd: tar -czf
            build_shell: bash
          - os: macos-latest
            artifact_name: pril-editor
            asset_name: pril-editor-macos.zip
            package_cmd: zip
            build_shell: bash
          - os: windows-latest
            artifact_name: pril-editor.exe
            asset_name: pril-editor-windows.zip
            package_cmd: 7z a
            build_shell: msys2 {0}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install wxWidgets (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwxgtk3.2-dev build-essential

      - name: Install wxWidgets (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install wxwidgets

      - name: Setup MSYS2 + wxWidgets (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-wxwidgets
            make

      - name: Build on Linux
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          make
          ls -l pril-editor || exit 1

      - name: Build on macOS
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          make
          ls -l pril-editor || exit 1

      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        shell: msys2 {0}
        run: |
          make
          ls -l pril-editor.exe || exit 1

      - name: Package Artifact
        run: |
          ${{ matrix.package_cmd }} "${{ matrix.asset_name }}" "${{ matrix.artifact_name }}"
        shell: bash

      - name: Upload Release Asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

      - name: Upload Artifact (Manual Run)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}
