name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-and-release:
    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: pril-editor
            asset_name: pril-editor-linux.tar.gz
          - os: macos-latest
            artifact_name: pril-editor
            asset_name: pril-editor-macos.zip
          - os: windows-latest
            artifact_name: pril-editor.exe
            asset_name: pril-editor-windows.zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up MSYS2 and install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-toolchain
          make
          mingw-w64-x86_64-wxwidgets

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install wxwidgets

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwxgtk3.2-dev

    - name: Build on macOS and Linux
      if: matrix.os != 'windows-latest'
      run: make

    - name: Build on Windows
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: make

    - name: Package artifact
      run: |
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a ${{ matrix.asset_name }} ${{ matrix.artifact_name }}
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          zip ${{ matrix.asset_name }} ${{ matrix.artifact_name }}
        else
          tar -czvf ${{ matrix.asset_name }} ${{ matrix.artifact_name }}
        fi

    - name: Create Dummy Release for Manual Run
      if: github.event_name == 'workflow_dispatch'
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest-manual-build"
        prerelease: true
        title: "Development Build"

    - name: Determine Upload URL
      id: get_upload_url
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "upload_url=$(jq -r '.upload_url' $HOME/release.json)" >> $GITHUB_OUTPUT
        else
          echo "upload_url=${{ github.event.release.upload_url }}" >> $GITHUB_OUTPUT
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream
